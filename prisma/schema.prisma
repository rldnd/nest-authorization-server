generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                       Int                     @id @default(autoincrement())
  email                    String                  @unique
  name                     String
  password                 String
  salt                     String
  role                     Int                     @default(1) @db.TinyInt
  refreshToken             String?                 @db.VarChar(255)
  positionId               Int?
  responsibilityOfOfficeId Int?
  jobId                    Int?
  job                      Job?                    @relation(fields: [jobId], references: [id])
  position                 Position?               @relation(fields: [positionId], references: [id])
  responsibilityOfOffice   ResponsibilityOfOffice? @relation(fields: [responsibilityOfOfficeId], references: [id])
  authorities              UserAuthority[]

  @@index([jobId], map: "User_jobId_fkey")
  @@index([positionId], map: "User_positionId_fkey")
  @@index([responsibilityOfOfficeId], map: "User_responsibilityOfOfficeId_fkey")
}

model UserAuthority {
  userId      Int
  authorityId Int
  authority   Authority @relation(fields: [authorityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, authorityId])
  @@index([authorityId], map: "UserAuthority_authorityId_fkey")
}

model Authority {
  id            Int                     @id @default(autoincrement())
  name          String                  @unique @db.VarChar(50)
  description   String?                 @db.VarChar(255)
  child         AuthorityHierarchy[]    @relation("Child")
  parent        AuthorityHierarchy[]    @relation("Parent")
  organizations OrganizationAuthority[]
  roles         RoleAuthority[]
  users         UserAuthority[]
}

model AuthorityHierarchy {
  parentId Int
  childId  Int
  child    Authority @relation("Child", fields: [childId], references: [id])
  parent   Authority @relation("Parent", fields: [parentId], references: [id])

  @@id([parentId, childId])
  @@index([childId], map: "AuthorityHierarchy_childId_fkey")
}

model BaseAuthority {
  id                Int                             @id @default(autoincrement())
  name              String                          @unique @db.VarChar(50)
  description       String?                         @db.VarChar(255)
  programCode       String?                         @db.VarChar(50)
  domainId          Int
  actionButtonMenus ActionButtonMenuBaseAuthority[]
  domain            BaseAuthorityDomain             @relation(fields: [domainId], references: [id])

  @@index([domainId], map: "BaseAuthority_domainId_fkey")
}

model BaseAuthorityDomain {
  id              Int             @id @default(autoincrement())
  name            String          @unique @db.VarChar(50)
  baseAuthorities BaseAuthority[]
}

model OrganizationAuthority {
  organizationId Int
  authorityId    Int
  authority      Authority    @relation(fields: [authorityId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([organizationId, authorityId])
  @@index([authorityId], map: "OrganizationAuthority_authorityId_fkey")
}

model Organization {
  id          Int                     @id @default(autoincrement())
  name        String                  @unique @db.VarChar(50)
  authorities OrganizationAuthority[]
}

model RoleAuthority {
  roleId      Int
  authorityId Int
  authority   Authority @relation(fields: [authorityId], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, authorityId])
  @@index([authorityId], map: "RoleAuthority_authorityId_fkey")
}

model Role {
  id                       Int                     @id @default(autoincrement())
  jobId                    Int?
  positionId               Int?
  responsibilityOfOfficeId Int?
  job                      Job?                    @relation(fields: [jobId], references: [id])
  position                 Position?               @relation(fields: [positionId], references: [id])
  responsibilityOfOffice   ResponsibilityOfOffice? @relation(fields: [responsibilityOfOfficeId], references: [id])
  authorities              RoleAuthority[]

  @@index([jobId], map: "Role_jobId_fkey")
  @@index([positionId], map: "Role_positionId_fkey")
  @@index([responsibilityOfOfficeId], map: "Role_responsibilityOfOfficeId_fkey")
}

model Position {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  role Role[]
  user User[]
}

model ResponsibilityOfOffice {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  role Role[]
  user User[]
}

model Job {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  role Role[]
  user User[]
}

model ActionButtonMenu {
  id              Int                             @id @default(autoincrement())
  name            String                          @db.VarChar(50)
  baseAuthorities ActionButtonMenuBaseAuthority[]
  programCodes    ActionButtonMenuProgramCode[]
}

model ActionButtonMenuBaseAuthority {
  actionButtonMenuId Int
  baseAuthorityId    Int
  actionButtonMenu   ActionButtonMenu @relation(fields: [actionButtonMenuId], references: [id])
  baseAuthority      BaseAuthority    @relation(fields: [baseAuthorityId], references: [id])

  @@id([actionButtonMenuId, baseAuthorityId])
  @@index([baseAuthorityId], map: "ActionButtonMenuBaseAuthority_baseAuthorityId_fkey")
}

model ActionButtonMenuProgramCode {
  actionButtonMenuId Int
  actionButtonCode   String           @db.VarChar(50)
  programCode        String           @db.VarChar(50)
  actionButtonMenu   ActionButtonMenu @relation(fields: [actionButtonMenuId], references: [id])

  @@id([actionButtonMenuId, actionButtonCode, programCode])
}
